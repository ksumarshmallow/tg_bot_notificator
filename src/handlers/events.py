import re
import logging
from datetime import datetime, timedelta
import dateparser
from telegram import Update
from telegram.ext import ContextTypes

from src.database import (add_event, 
                          get_events, 
                          delete_event, 
                          get_event_id)

async def add_event_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ")

async def handle_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.debug(f"Received message: {text}")
    event_format = r"(\d{2})\.(\d{2})\.(\d{4}) (\d{2}):(\d{2}) (.+)"
    match = re.match(event_format, text)
    if not match:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ")
        return

    date_str = f"{match.group(3)}-{match.group(2)}-{match.group(1)}"
    time_str = f"{match.group(4)}:{match.group(5)}"
    description = match.group(6)

    await add_event(context.bot_data['db_conn'], update.effective_user.id, date_str, time_str, description)
    await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    date = datetime.now().strftime("%Y-%m-%d")
    if context.args:
        user_date = " ".join(context.args)
        parsed_date = dateparser.parse(user_date, settings={'RETURN_AS_TIMEZONE_AWARE': False})
        if parsed_date:
            date = parsed_date.strftime("%Y-%m-%d")
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞."
            )
            return

    events_list = await get_events(context.bot_data['db_conn'], update.effective_user.id, date)
    if events_list:
        text = "\n".join([f"‚è∞ {time} - {desc}" for _, time, desc in events_list])
    else:
        text = f"–ù–∞ {date} –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
    await update.message.reply_text(text)

async def delete_event_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /delete –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
        )
        return

    date_time_str = " ".join(context.args)
    parsed_date = dateparser.parse(date_time_str, settings={'RETURN_AS_TIMEZONE_AWARE': False})
    if not parsed_date:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú."
        )
        return

    date = parsed_date.strftime("%Y-%m-%d")
    time = parsed_date.strftime("%H:%M")
    rows = delete_event(context.bot_data['db_conn'], update.effective_user.id, date, time)
    if rows > 0:
        await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ {date} –≤ {time} —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text(f"‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–∞ {date} –≤ {time} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def get_event_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /get_id –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
        )
        return

    date_time_str = " ".join(context.args)
    parsed_date = dateparser.parse(date_time_str, settings={'RETURN_AS_TIMEZONE_AWARE': False})
    if not parsed_date:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú."
        )
        return

    date = parsed_date.strftime("%Y-%m-%d")
    time = parsed_date.strftime("%H:%M")
    event = get_event_id(context.bot_data['db_conn'], update.effective_user.id, date, time)
    if event:
        await update.message.reply_text(f"‚úÖ ID —Å–æ–±—ã—Ç–∏—è –Ω–∞ {date} –≤ {time}: {event[0]}")
    else:
        await update.message.reply_text(f"‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–∞ {date} –≤ {time} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def send_tomorrow_notifications(context: ContextTypes.DEFAULT_TYPE):
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    conn = context.bot_data['db_conn']
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, time, description FROM events WHERE date = ?", (tomorrow,))
    events = cursor.fetchall()
    for user_id, time, description in events:
        await context.bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ –≤ {time}: {description}")
