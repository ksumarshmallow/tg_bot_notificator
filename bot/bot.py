import logging
import aiohttp
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dataclasses import dataclass
from bot.states import (
    AwaitingDateState,
    AwaitingNameState,
    AwaitingDeleteDateState,
    AwaitingDeleteChoiceState,
)

logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

STATE_HANDLERS = {
    "awaiting_event_date": AwaitingDateState(),
    "awaiting_todo_date": AwaitingDateState(),
    "awaiting_event_name": AwaitingNameState(),
    "awaiting_todo_name": AwaitingNameState(),
    "awaiting_delete_date": AwaitingDeleteDateState(),
    "awaiting_delete_choice": AwaitingDeleteChoiceState(),
}

@dataclass
class TelegramCalendarBot:
    token: str

    def __post_init__(self):
        self.start_message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å-–±–æ—Ç üìÖ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏."
        )
        self.buttons = {
            "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ": self.add_event,
            "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É": self.add_todo,
            "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É": self.delete_event,
            "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å": self.open_calendar,
        }
        keyboard = [[btn] for btn in self.buttons]
        self.reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        self.backend_url = "http://127.0.0.1:5001"

    async def start(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} started bot")
        await update.message.reply_text(self.start_message, reply_markup=self.reply_markup)

    async def add_event(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} wants to add an event")
        # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        context.user_data["state"] = "awaiting_event_date"
        context.user_data["type"] = "event"
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è üìÖ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00')")

    async def add_todo(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} wants to add a todo")
        context.user_data["state"] = "awaiting_todo_date"
        context.user_data["type"] = "todo"
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ—Ç –ø—É—Ç—å –±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ add_event
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è üìÖ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞')")

    async def delete_event(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} wants to delete an event")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data["state"] = "awaiting_delete_date"
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞')")

    async def open_calendar(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} opened calendar.")
        await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–∫–∞ –ø—Ä–æ—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –µ–≥–æ :) –£ —Ç–µ–±—è –∂–µ —Ö–æ—Ä–æ—à–µ–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ?")

    async def fetch_events_by_date(self, user_id, date):
        url = f"{self.backend_url}/events/by_date"
        payload = {"user_id": user_id, "date": date}
        async with aiohttp.ClientSession() as session:
            async with session.get(url, json=payload) as resp:
                if resp.status in {200, 201}:
                    return await resp.json()
                else:
                    return None

    async def handle_text(self, update: Update, context: CallbackContext):
        text = update.message.text
        user_id = update.effective_user.id

        if text in self.buttons:
            return await self.buttons[text](update, context)

        # –µ—Å–æ–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∞—Å—Å—É
        current_state = context.user_data.get("state")
        if current_state in STATE_HANDLERS:
            handler = STATE_HANDLERS[current_state]
            await handler.handle(self, update, context)
        else:
            logger.warning(f"User {user_id} sent unrecognized text: {text}")
            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –Ω–∏—á–µ–≥–æ... ü•≤ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

    def run(self):
        app = Application.builder().token(self.token).build()
        
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("addevent", self.add_event))
        app.add_handler(CommandHandler("addtodo", self.add_todo))
        app.add_handler(CommandHandler("delete", self.delete_event))
        
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        logger.info("Bot is started...")
        
        app.run_polling(close_loop=False)

