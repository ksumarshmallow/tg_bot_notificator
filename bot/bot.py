import re
import logging
import requests
import aiohttp
from dataclasses import dataclass
from datetime import datetime, timedelta
from dateparser.search import search_dates

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

#TODO: deadlines
#TODO: event from start_date to end_date (deadline)
#TODO: add links to events (zoom etc), any comments

@dataclass
class TelegramCalendarBot:
    token: str

    def __post_init__(self):
        self.start_message = (
            "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –Ø - —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å-–±–æ—Ç üìÖ\n\n–ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ –≤–æ–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –Ω–∏—Ö üòä"
            "\n\n–ê —Ç–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚ñ´Ô∏è /add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
            "‚ñ´Ô∏è /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã ‚Äì –ø–∏—à–∏ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é: @ksu_marshmallow üê±\n\n"
            "–ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –¢—Ä—É–¥–æ–≤—É—é –ë—É—Ä–∂—É–∞–∑–Ω—É—é –ñ–∏–∑–Ω—å! üíµ"
        )

        self.buttons = {
            "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ": self.add_event,
            "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É": self.add_todo,
            "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É": self.delete_event,
            "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å": self.open_calendar,
        }

        keyboard = [[btn] for btn in self.buttons]

        self.reply_markup = ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True
        )

        self.backend_url = "http://127.0.0.1:5001"

    async def start(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} started bot")
        await update.message.reply_text(self.start_message, reply_markup=self.reply_markup)

    async def add_event(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} wants to add an event")
        context.user_data["state"] = "awaiting_event_date"
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è üìÖ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00' –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD HH:MM')")
    
    async def add_todo(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} wants to add a to-do")
        context.user_data["state"] = "awaiting_todo_date"
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É –∑–∞–º–µ—Ç–∫–∏ üìÖ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞' –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD')")
    
    async def delete_event(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} wants to delete event")
        context.user_data["state"] = "awaiting_delete_date"
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞' –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD')")

    async def open_calendar(self, update: Update, context: CallbackContext):
        logger.info(f"User {update.effective_user.id} opened calendar.")
        await update.message.reply_text("üìÖ –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –µ–≥–æ))")
    
    def _parse_datetime(self, text):
        parsed_date = search_dates(text, languages=["ru"])
        pattern_time = re.search(r'\d\d:\d\d', text)

        if not parsed_date:
            return None
        
        date = parsed_date[0][1].strftime("%Y-%m-%d %H:%M") if pattern_time is not None else parsed_date[0][1].strftime("%Y-%m-%d")
        return date

    async def handle_text(self, update: Update, context: CallbackContext):
        text = update.message.text
        user_id = update.effective_user.id
        state = context.user_data.get("state")

        if text in self.buttons:
            return await self.buttons[text](update, context)
        
        # 1. –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –ø—Ä–æ—Å–∏–º —Å–æ–±—ã—Ç–∏–µ
        if state == "awaiting_event_date" or state == "awaiting_todo_date":
            date = self._parse_datetime(text)
            if date is None:
                logger.warning(f"User {user_id} sent invalid date: {text}")
                return await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É ü•≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            context.user_data["temp_date"] = date
        
            if state == "awaiting_event_date":
                context.user_data["state"] = "awaiting_event_name"
                await update.message.reply_text("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
            else:
                context.user_data["state"] = "awaiting_todo_name"
                await update.message.reply_text("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–≤–æ–µ –¥–µ–ª–æ –¥–ª—è TODO-—à–∫–∏")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        elif state=="awaiting_event_name" or state=="awaiting_todo_name":
            event_name = text
            event_date = context.user_data.pop("temp_date", None)

            if not event_date:
                return await update.message.reply_text("–î–∞—Ç–∞ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å ü•≤, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
            
            # make URL and data for query
            url = f"{self.backend_url}/events" if state=="awaiting_event_name" else f"{self.backend_url}/todos"
            logger.info(url)
            payload = {"user_id": user_id, "name": event_name, "date": event_date}

            # assynchrnucally send POST-query on server
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as resp:
                    if resp.status == 201:
                        logger.info(f"User {user_id} successfully added {'event' if state=='awaiting_event_name' else 'todo'}: {event_name} ({event_date})")
                    else:
                        logger.error(f"User {user_id} failed to add {'event' if state=='awaiting_event_name' else 'todo'}: {event_name} ({event_date}). Status: {resp.status}")
            
            logger.info(f"User {user_id} added {state.split('_')[1]}: {event_name} ({event_date})")
            context.user_data["state"] = None
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{event_name}' –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {event_date}!")
        
        # 3. –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É
        elif state == "awaiting_delete_date":
            date = self._parse_datetime(text)
            if date is None:
                logger.warning(f"User {user_id} sent invalid date: {text}")
                return await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É ü•≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")

            context.user_data["temp_date"] = date

            response = requests.get(f"{self.backend_url}/events/by_date", json={"user_id": user_id, "date": date})

            if response.status_code != 200:
                return await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ üõ†Ô∏è")

            events = response.json()

            if not events:
                return await update.message.reply_text("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üòå")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ user_data
            context.user_data["delete_events"] = {str(i+1): event["name"] for i, event in enumerate(events)}

            events_list = "\n".join(f"{i+1}. {event['name']}" for i, event in enumerate(events))
            await update.message.reply_text(f"üìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ {date}:\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{events_list}")

            context.user_data["state"] = "awaiting_delete_event"
        
        # 4. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ
        elif state == "awaiting_delete_event":
            event_index = text.strip()
            event_name = context.user_data.get("delete_events", {}).get(event_index)

            if not event_name:
                return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ üßê")

            date = context.user_data["temp_date"]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            url = f"{self.backend_url}/events/delete"
            payload = {"user_id": user_id, "name": event_name, "date": date}

            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as resp:
                    if resp.status in {200, 201}:
                        await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{event_name}' —É–¥–∞–ª–µ–Ω–æ!")
                    else:
                        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ üõ†Ô∏è")

            context.user_data["state"] = None
            context.user_data.pop("delete_events", None)
            context.user_data.pop("temp_date", None)


        else:
            logger.warning(f"User {user_id} sent unrecognized text: {text}")
            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –Ω–∏—á–µ–≥–æ... ü•≤ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

    def run(self):
        app = Application.builder().token(self.token).build()

        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("addevent", self.add_event))
        app.add_handler(CommandHandler("addtodo", self.add_todo))
        app.add_handler(CommandHandler("delete", self.delete_event))

        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

        logger.info("Bot is started...")
        app.run_polling(close_loop=False)